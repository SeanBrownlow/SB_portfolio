When was the golden age of games?

game_sales

column	type	meaning
game	varchar	Name of the video game
platform	varchar	Gaming platform
publisher	varchar	Game publisher
developer	varchar	Game developer
games_sold	float	Number of copies sold (millions)
year	int	Release year

reviews

column	type	meaning
game	varchar	Name of the video game
critic_score	float	Critic score according to Metacritic
user_score	float	User score according to Metacritic

From <https://sessions.datacamp.com/proxy/absolute/7acffc80-14ad-4523-a48a-458fdca2e262/notebooks/production/users/2503340/2bvmwybubz/notebooks/notebook.ipynb> 




1.

-- Select all information for the top ten best-selling games
-- Order the results from best-selling game down to tenth best-selling


SELECT *
FROM game_sales
ORDER BY games_sold DESC
LIMIT 10;



2.

-- Join games_sales and reviews
-- Select a count of the number of games where both critic_score and user_score are null

SELECT COUNT(game_sales.game)
FROM game_sales
LEFT JOIN reviews
ON game_sales.game = reviews.game
WHERE reviews.critic_score IS NULL AND reviews.user_score IS NULL;



3.

-- Select release year and average critic score for each year, rounded and aliased
-- Join the game_sales and reviews tables
-- Group by release year
-- Order the data from highest to lowest avg_critic_score and limit to 10 results


SELECT
    g.year,
    ROUND(AVG(r.critic_score),2) as avg_critic_score
FROM game_sales as g
INNER JOIN reviews as r
ON g.game = r.game
GROUP BY g.year
ORDER BY avg_critic_score DESC
LIMIT 10;



4.

-- Paste your query from the previous task; update it to add a count of games released in each year called num_games
-- Update the query so that it only returns years that have more than four reviewed games

SELECT
    g.year,
    ROUND(AVG(r.critic_score),2) as avg_critic_score,
    COUNT(g.game) as num_games
FROM game_sales as g
INNER JOIN reviews as r
ON g.game = r.game
GROUP BY g.year
HAVING COUNT(g.game) > 4
ORDER BY avg_critic_score DESC
LIMIT 10;



top_critic_years

column	type	meaning
year	int	Year of video game release
avg_critic_score	float	Average of all critic scores for games released in that year

top_critic_years_more_than_four_games

column	type	meaning
year	int	Year of video game release
num_games	int	Count of the number of video games released in that year
avg_critic_score	float	Average of all critic scores for games released in that year

From <https://sessions.datacamp.com/proxy/absolute/7acffc80-14ad-4523-a48a-458fdca2e262/notebooks/production/users/2503340/2bvmwybubz/notebooks/notebook.ipynb> 




5.

-- Select the year and avg_critic_score for those years that dropped off the list of critic favorites 
-- Order the results from highest to lowest avg_critic_score

SELECT year, avg_critic_score
FROM top_critic_years
EXCEPT
SELECT year, avg_critic_score
FROM top_critic_years_more_than_four_games
ORDER BY avg_critic_score DESC



6.

-- Select year, an average of user_score, and a count of games released in a given year, aliased and rounded
-- Include only years with more than four reviewed games; group data by year
-- Order data by avg_user_score, and limit to ten results


SELECT
    g.year,
    ROUND(AVG(r.user_score),2) as avg_user_score,
    COUNT(g.game) as num_games
FROM game_sales as g
INNER JOIN reviews as r
ON g.game = r.game
GROUP BY g.year
HAVING COUNT(g.game) > 4
ORDER BY avg_user_score DESC
LIMIT 10;



top_critic_years_more_than_four_games

column	type	meaning
year	int	Year of video game release
num_games	int	Count of the number of video games released in that year
avg_critic_score	float	Average of all critic scores for games released in that year

We've also saved the results of our top user years query from the previous task into a table:

top_user_years_more_than_four_games

column	type	meaning
year	int	Year of video game release
num_games	int	Count of the number of video games released in that year
avg_user_score	float	Average of all user scores for games released in that year

From <https://sessions.datacamp.com/proxy/absolute/1b1921dc-46e5-4fd7-a755-c01772863bc8/notebooks/production/users/2503340/2bvmwybubz/notebooks/notebook.ipynb> 



7.

-- Select the year results that appear on both tables

SELECT year
FROM top_critic_years_more_than_four_games
INTERSECT
SELECT year
FROM top_user_years_more_than_four_games


8.


-- Select year and sum of games_sold, aliased as total_games_sold; order results by total_games_sold descending
-- Filter game_sales based on whether each year is in the list returned in the previous task



SELECT year, SUM(games_sold) as total_games_sold
FROM game_sales
WHERE year IN
    (SELECT year
    FROM top_critic_years_more_than_four_games
    INTERSECT
    SELECT year
    FROM top_user_years_more_than_four_games)
GROUP BY year
ORDER BY total_games_sold DESC
